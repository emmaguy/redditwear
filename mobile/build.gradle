buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven {
        url "https://s3.amazonaws.com/repo.commonsware.com"
    }
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    signingConfigs {
        release
    }
    defaultConfig {
        applicationId "com.emmaguy.todayilearned"
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 50
        versionName '3.0.15'
        resValue "string", "client_id", "placeholderId"
        resValue "string", "fabric_api_key", "placeholderId"
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        manifestPlaceholders = [ fabricApiKey:"0000000000000000000000000000000000000000"]
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
        debug {
            testCoverageEnabled true
        }
    }
    lintOptions {
        disable 'Overdraw', 'InvalidPackage', 'UnusedResources'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile project(':sharedlib')

    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:1.0.1'
    compile 'net.danlew:android.joda:2.7.2'
    compile 'com.commonsware.cwac:wakeful:1.1.0'

    // Dagger
    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    // Logging
    compile 'com.jakewharton.timber:timber:3.1.0'

    // Network
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.3.0' // https://github.com/square/retrofit/issues/854

    // UI
    compile 'com.android.support:recyclerview-v7:23.4.0'
    compile('de.psdev.licensesdialog:licensesdialog:1.5.0') {
        exclude module: 'support-v4'
    }

    // Fabric
    compile('com.crashlytics.sdk.android:crashlytics:2.5.3@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:answers:1.3.4@aar') {
        transitive = true;
    }

    compile 'com.google.android.gms:play-services-wearable:8.1.0'
    wearApp project(':wear')

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.7-beta'
}

def Properties props = new Properties()
if (project.hasProperty("signing.properties") && file(project.property("signing.properties")).canRead()) {
    props.load(new FileInputStream(file(project.property("signing.properties"))))

    if (props != null && props.containsKey('keystore') && props.containsKey('keystore.password') && props.containsKey('keyalias') && props.containsKey('keyalias.password')) {
        android.signingConfigs.release.storeFile = file(props['keystore'])
        android.signingConfigs.release.storePassword = props['keystore.password']
        android.signingConfigs.release.keyAlias = props['keyalias']
        android.signingConfigs.release.keyPassword = props['keyalias.password']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }

    if (props != null && props.containsKey('clientid')) {
        android.defaultConfig.resValue "string", "client_id", props['clientid']
    } else {
        println 'Did not find client id'
    }
    if (props != null && props.containsKey('fabricapi')) {
        android.defaultConfig.manifestPlaceholders fabricApiKey:props['fabricapi']
    } else {
        println 'Did not find Fabric API key'
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
